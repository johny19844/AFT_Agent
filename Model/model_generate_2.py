import os
import subprocess
import shutil
from pathlib import Path
from llama_cpp import Llama
import requests
import json

class TestProjectCreator:
    def __init__(self, model_path):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Ç–µ–º –∫ GGUF –º–æ–¥–µ–ª–∏"""
        self.model_path = model_path
        self.llm = None
        self.project_dir = "selenium-test-project"
        self.repo_url = "https://github.com/johny19844/AFT.git"

    def initialize_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            self.llm = Llama(
                model_path=self.model_path,
                n_ctx=4096,
                n_threads=4,
                verbose=False
            )
            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            return False

    def generate_with_llm(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
        try:
            output = self.llm(
                prompt,
                max_tokens=2000,
                temperature=0.3,
                top_p=0.9,
                echo=False,
                stop=["```", "###", "---"]
            )
            return output['choices'][0]['text'].strip()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return None

    def create_maven_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Maven –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if os.path.exists(self.project_dir):
                shutil.rmtree(self.project_dir)

            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            directories = [
                "src/main/java/com/example",
                "src/test/java/com/example",
                "src/test/resources",
                "src/main/resources"
            ]

            for directory in directories:
                os.makedirs(os.path.join(self.project_dir, directory), exist_ok=True)

            print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Maven –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False

    def generate_pom_xml(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è pom.xml —Å –ø–æ–º–æ—â—å—é LLM"""
        prompt = """–°–æ–∑–¥–∞–π –ø–æ–ª–Ω—ã–π pom.xml —Ñ–∞–π–ª –¥–ª—è Maven –ø—Ä–æ–µ–∫—Ç–∞ —Å Java Selenium –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏.
–í–∫–ª—é—á–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
- Selenium WebDriver 4.15.0
- TestNG 7.8.0
- WebDriverManager 5.6.0
- Surefire plugin –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
- –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä Java 11

–°–¥–µ–ª–∞–π —Ñ–∞–π–ª –≥–æ—Ç–æ–≤—ã–º –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>selenium-test-project</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>"""

        pom_content = self.generate_with_llm(prompt)
        if pom_content:
            pom_path = os.path.join(self.project_dir, "pom.xml")
            with open(pom_path, 'w', encoding='utf-8') as f:
                f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
                f.write(pom_content)
            print("‚úÖ pom.xml —Å–æ–∑–¥–∞–Ω")
            return True
        return False

    def create_base_test_class(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM"""
        base_test_content = """package com.example;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import java.time.Duration;

public class BaseTest {
    protected WebDriver driver;

    @BeforeMethod
    public void setUp() {
        WebDriverManager.chromedriver().setup();
        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless=new");
        options.addArguments("--disable-gpu");
        options.addArguments("--window-size=1920,1080");
        options.addArguments("--no-sandbox");
        options.addArguments("--disable-dev-shm-usage");
        driver = new ChromeDriver(options);
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.manage().window().maximize();
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    protected void navigateTo(String url) {
        driver.get(url);
    }

    protected void waitForPageLoad() {
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}"""

        try:
            test_path = os.path.join(self.project_dir, "src/test/java/com/example/BaseTest.java")
            with open(test_path, 'w', encoding='utf-8') as f:
                f.write(base_test_content)
            print("‚úÖ BaseTest.java —Å–æ–∑–¥–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BaseTest: {e}")
            return False

    def generate_sample_test(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ —Ç–µ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é LLM"""
        prompt = """–°–æ–∑–¥–∞–π –ø—Ä–∏–º–µ—Ä Selenium —Ç–µ—Å—Ç–∞ –Ω–∞ TestNG –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç Google –ø–æ–∏—Å–∫.
–¢–µ—Å—Ç –¥–æ–ª–∂–µ–Ω:
- –ù–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –æ—Ç BaseTest
- –ò—Å–∫–∞—Ç—å "Selenium WebDriver" –≤ Google
- –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ TestNG
- –í–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ Assert

–ö–æ–¥:```java
package com.example;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

public class GoogleSearchTest extends BaseTest {"""

        test_content = self.generate_with_llm(prompt)
        if test_content:
            test_path = os.path.join(self.project_dir, "src/test/java/com/example/GoogleSearchTest.java")
            with open(test_path, 'w', encoding='utf-8') as f:
                f.write(test_content)
            print("‚úÖ GoogleSearchTest.java —Å–æ–∑–¥–∞–Ω")
            return True
        return False

    def create_config_files(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # .gitignore
            gitignore_content = """target/
*.class
*.jar
*.war
*.ear
*.zip
*.tar.gz
*.rar
*.iml
.idea/
*.log
*.tmp
*.swp
.DS_Store
.env
node_modules/
dist/
build/
*.classpath
*.project
.settings/
bin/
"""
            gitignore_path = os.path.join(self.project_dir, ".gitignore")
            with open(gitignore_path, 'w', encoding='utf-8') as f:
                f.write(gitignore_content)

            print("‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
            return False

    def create_readme(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–∞"""
        readme_content = """# Selenium Test Project
–ü—Ä–æ–µ–∫—Ç –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –Ω–∞ Java + Selenium + TestNG + WebDriverManager

## üöÄ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
- Java 11+
- Maven 3.6+
- Chrome browser

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫

```bash
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone https://github.com/johny19844/AFT.git
cd AFT

# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
mvn clean test

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
text
src/
‚îî‚îÄ‚îÄ test/
    ‚îî‚îÄ‚îÄ java/
        ‚îî‚îÄ‚îÄ com/
            ‚îî‚îÄ‚îÄ example/
                ‚îú‚îÄ‚îÄ BaseTest.java      # –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–æ–≤
                ‚îî‚îÄ‚îÄ GoogleSearchTest.java # –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WebDriverManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏
–¢–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è –≤ headless —Ä–µ–∂–∏–º–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TestNG –∫–∞–∫ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞
–ü—Ä–æ–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∞ GoogleSearchTest –∫–æ—Ç–æ—Ä—ã–π:
–û—Ç–∫—Ä—ã–≤–∞–µ—Ç Google
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ "Selenium WebDriver"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

–õ–∏—Ü–µ–Ω–∑–∏—è
MIT License"""

        try:
            readme_path = os.path.join(self.project_dir, "README.md")
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            print("‚úÖ README.md —Å–æ–∑–¥–∞–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è README: {e}")
            return False

    def initialize_git(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            original_dir = os.getcwd()
            os.chdir(self.project_dir)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º git
            subprocess.run(["git", "init"], check=True, capture_output=True)
            subprocess.run(["git", "add", "."], check=True, capture_output=True)
            subprocess.run(["git", "commit", "-m", "Initial commit: Selenium test project with Java + TestNG + Selenium"],
                        check=True, capture_output=True)

            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            os.chdir(original_dir)
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ git: {e}")
            os.chdir(original_dir)
            return False

    def push_to_github(self, github_token):
        """–ü—É—à–∏–º –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitHub"""
        try:
            if not os.path.exists(self.project_dir):
                print("‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            original_dir = os.getcwd()
            os.chdir(self.project_dir)

            # –î–æ–±–∞–≤–ª—è–µ–º remote origin
            subprocess.run(["git", "remote", "add", "origin", self.repo_url],
                        check=True, capture_output=True)

            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤–µ—Ç–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            try:
                subprocess.run(["git", "branch", "-M", "main"],
                            check=True, capture_output=True)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –≤–µ—Ç–∫–∏

            # –ü—É—à–∏–º –Ω–∞ GitHub
            result = subprocess.run(["git", "push", "-u", "origin", "main"],
                                capture_output=True, text=True)

            if result.returncode == 0:
                print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–∏—Ç –Ω–∞ GitHub")
                os.chdir(original_dir)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –Ω–∞ GitHub: {result.stderr}")
                os.chdir(original_dir)
                return False

        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—à–µ –Ω–∞ GitHub: {e}")
            os.chdir(original_dir)
            return False

    def create_project(self, github_token=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        if not self.initialize_model():
            return False

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        if not self.create_maven_structure():
            return False

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
        if not self.generate_pom_xml():
            return False

        if not self.create_base_test_class():
            return False

        if not self.generate_sample_test():
            return False

        if not self.create_config_files():
            return False

        if not self.create_readme():
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º git
        if not self.initialize_git():
            return False

        # –ü—É—à–∏–º –Ω–∞ GitHub –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω
        if github_token:
            # –û–±–Ω–æ–≤–ª—è–µ–º URL —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            auth_repo_url = self.repo_url.replace(
                "https://github.com/",
                f"https://{github_token}@github.com/"
            )
            self.repo_url = auth_repo_url

            if self.push_to_github(github_token):
                print("üéâ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ GitHub!")
                return True
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∞ GitHub")
                return True  # –í—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ
        else:
            print("üìÅ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ GitHub —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
            return True
def main():
    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π GGUF –º–æ–¥–µ–ª–∏
    model_path = "/home/johny/ai/agent/models/yandex-gpt.gguf" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å

    # –¢–æ–∫–µ–Ω GitHub (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    github_token = "" #os.getenv("GITHUB_TOKEN")  # –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ —è–≤–Ω–æ

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    required_tools = ["git", "mvn", "java"]
    for tool in required_tools:
        try:
            subprocess.run([tool, "--version"], capture_output=True, check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"‚ùå –û—à–∏–±–∫–∞: {tool} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return

    creator = TestProjectCreator(model_path)

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
    success = creator.create_project(github_token)

    if success:
        print("\n" + "="*50)
        print("‚úÖ –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"üìç –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {os.path.abspath(creator.project_dir)}")
        if github_token:
            print("üåê –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/johny19844/AFT")
        print("üìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cd selenium-test-project && mvn clean test")
        print("="*50)
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
