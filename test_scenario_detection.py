#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import os
import sys
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_scenario_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    try:
        import agent_v02
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        github_token = os.getenv('GITHUB_TOKEN', 'your_github_token_here')
        if github_token == 'your_github_token_here':
            print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = agent_v02.TestAutomationAgent(
            github_token=github_token,
            jenkins_url="http://localhost:8080",
            jenkins_username="admin",
            jenkins_token="dummy_token",
            model_path="./models/yandex-gpt.gguf",
            github_username="johny19844",
            scenario_repo="johny19844/scenario",
            aft_repo="johny19844/AFT"
        )
        
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        changed_files = agent.scan_scenario_repository()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(changed_files)}")
        print(f"üìù –§–∞–π–ª—ã: {list(changed_files)}")
        
        if changed_files:
            print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            first_file = list(changed_files)[0]
            print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {first_file}")
            
            success = agent.process_scenario(first_file)
            if success:
                print(f"‚úÖ –§–∞–π–ª {first_file} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {first_file}")
        else:
            print("‚ÑπÔ∏è –§–∞–π–ª—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_github_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub...")
    
    try:
        from github import Github
        
        github_token = os.getenv('GITHUB_TOKEN', 'your_github_token_here')
        if github_token == 'your_github_token_here':
            print("‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return False
        
        github_client = Github(github_token)
        user = github_client.get_user()
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ GitHub –∫–∞–∫: {user.login}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º
        scenario_repo = github_client.get_repo("johny19844/scenario")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {scenario_repo.full_name}")
        
        aft_repo = github_client.get_repo("johny19844/AFT")
        print(f"‚úÖ –î–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é AFT: {aft_repo.full_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        contents = scenario_repo.get_contents("")
        txt_files = []
        
        for content in contents:
            if content.type == "file" and content.name.endswith('.txt'):
                txt_files.append(content.name)
            elif content.type == "dir":
                sub_contents = scenario_repo.get_contents(content.path)
                for sub_content in sub_contents:
                    if sub_content.type == "file" and sub_content.name.endswith('.txt'):
                        txt_files.append(sub_content.path)
        
        print(f"üìù –ù–∞–π–¥–µ–Ω–æ .txt —Ñ–∞–π–ª–æ–≤: {len(txt_files)}")
        for file in txt_files:
            print(f"  - {file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
    print("=" * 50)
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub", test_github_connection),
        ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤", test_scenario_detection)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–µ—Å—Ç: {test_name}")
        print("-" * 30)
        
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("üí• –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
