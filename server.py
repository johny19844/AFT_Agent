from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import subprocess
import threading
import os
import json
import sys
import shutil
import time
import re

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
agent_process = None
agent_status = "stopped"
agent_logs = []
last_log_count = 0

def add_agent_log(message, log_type="info"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞ —Å —Ç–∏–ø–æ–º –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global agent_logs
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    formatted_message = f"{timestamp} - {message}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    if any(keyword in message.lower() for keyword in ['error', 'failed', '–æ—à–∏–±–∫–∞', '–Ω–µ —É–¥–∞–ª–æ—Å—å']):
        log_type = "error"
    elif any(keyword in message.lower() for keyword in ['success', '—É—Å–ø–µ—à–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '‚úÖ']):
        log_type = "success"
    elif any(keyword in message.lower() for keyword in ['warning', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '‚ö†Ô∏è']):
        log_type = "warning"
    elif any(keyword in message.lower() for keyword in ['info', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']):
        log_type = "info"
    
    log_entry = {
        "message": formatted_message,
        "type": log_type,
        "timestamp": timestamp,
        "raw_message": message
    }
    
    agent_logs.append(log_entry)
    print(f"üìù {formatted_message}")

def get_absolute_model_path(model_filename):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏"""
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    possible_paths = [
        model_filename,  # –ï—Å–ª–∏ —É–∂–µ –ø–µ—Ä–µ–¥–∞–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
        f"./models/{model_filename}",  # –í –ø–∞–ø–∫–µ models
        f"./{model_filename}",  # –í –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ
        f"../{model_filename}",  # –ù–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            return os.path.abspath(path)
    
    return None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º HTML –∏–∑ —Ñ–∞–π–ª–∞"""
    return render_template('index.html')

@app.route('/api/upload-model', methods=['POST'])
def upload_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        if 'model' not in request.files:
            return jsonify({"status": "error", "message": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"})
        
        file = request.files['model']
        if file.filename == '':
            return jsonify({"status": "error", "message": "–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω"})
        
        if file and file.filename.endswith('.gguf'):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É models
            filename = file.filename
            models_dir = './models'
            os.makedirs(models_dir, exist_ok=True)
            
            file_path = os.path.join(models_dir, filename)
            file.save(file_path)
            
            absolute_path = os.path.abspath(file_path)
            add_agent_log(f"INFO - üìÅ –§–∞–π–ª –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω: {filename}", "success")
            add_agent_log(f"INFO - üìÇ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {absolute_path}", "info")
            
            return jsonify({
                "status": "success", 
                "message": f"–§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–µ–Ω", 
                "path": absolute_path,
                "filename": filename
            })
        else:
            return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ù—É–∂–µ–Ω .gguf"})
            
    except Exception as e:
        add_agent_log(f"ERROR - ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", "error")
        return jsonify({"status": "error", "message": str(e)})

@app.route('/api/start', methods=['POST'])
def start_agent():
    global agent_process, agent_status, agent_logs, last_log_count
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ agent_v024_interface.py
    if not os.path.exists('agent_v024_interface.py'):
        add_agent_log("ERROR - ‚ùå –§–∞–π–ª agent_v024_interface.py –Ω–µ –Ω–∞–π–¥–µ–Ω!", "error")
        return jsonify({
            "status": "error", 
            "message": "–§–∞–π–ª agent_v024_interface.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ."
        })
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    config = request.json
    add_agent_log(f"INFO - üîÑ –ü–æ–ª—É—á–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", "info")
    add_agent_log(f"INFO -    –ú–æ–¥–µ–ª—å: {config['model_path']}", "info")
    add_agent_log(f"INFO -    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {config['scenario_repo']}", "info")
    add_agent_log(f"INFO -    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π AFT: {config['aft_repo']}", "info")
    add_agent_log(f"INFO -    –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {config['scan_interval']} —Å–µ–∫", "info")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ª–æ–≥–∏
    agent_logs = []
    last_log_count = 0
    
    add_agent_log("INFO - üöÄ –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...", "info")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏
    model_filename = config["model_path"]
    absolute_model_path = get_absolute_model_path(model_filename)
    
    if not absolute_model_path:
        add_agent_log(f"ERROR - ‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_filename}", "error")
        add_agent_log("INFO - üîç –ò—Å–∫–∞–ª–∏ –≤: ./models/, ./, ../", "info")
        return jsonify({
            "status": "error", 
            "message": f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_filename}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å."
        })
    
    add_agent_log(f"INFO - ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏: {absolute_model_path}", "success")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞
        cmd = [
            sys.executable,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ Python, —á—Ç–æ –∏ —Å–µ—Ä–≤–µ—Ä
            "agent_v024_interface.py",
            "--model", absolute_model_path,  # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
            "--scenario-repo", config["scenario_repo"], 
            "--aft-repo", config["aft_repo"],
            "--interval", str(config["scan_interval"])
        ]
        
        add_agent_log(f"INFO - üîß –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {' '.join(cmd)}", "info")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        env['PYTHONUTF8'] = '1'
        
        agent_process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            universal_newlines=True,
            encoding='utf-8',
            errors='replace',
            env=env
        )
        
        agent_status = "running"
        add_agent_log("INFO - ‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!", "success")
        add_agent_log("INFO - üìñ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞...", "info")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=read_agent_logs, daemon=True).start()
        
        return jsonify({"status": "success", "message": "–ê–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω!"})
    
    except Exception as e:
        error_msg = f"ERROR - ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}"
        add_agent_log(error_msg, "error")
        return jsonify({"status": "error", "message": str(e)})

@app.route('/api/stop', methods=['POST'])
def stop_agent():
    global agent_process, agent_status
    
    if agent_process:
        add_agent_log("WARNING - üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", "warning")
        agent_process.terminate()
        try:
            agent_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            agent_process.kill()
            add_agent_log("WARNING - ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –±—ã–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "warning")
        agent_process = None
        add_agent_log("INFO - ‚úÖ –ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "info")
    
    agent_status = "stopped"
    return jsonify({"status": "success", "message": "–ê–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"})

@app.route('/api/status', methods=['GET'])
def get_status():
    global last_log_count, agent_logs
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ª–æ–≥–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
    new_logs = agent_logs[last_log_count:]
    last_log_count = len(agent_logs)
    
    return jsonify({
        "status": agent_status,
        "logs": new_logs,  # –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ª–æ–≥–∏
        "total_logs": len(agent_logs)
    })

@app.route('/api/logs', methods=['GET'])
def get_all_logs():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ª–æ–≥–∏ (–¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞)"""
    return jsonify({
        "logs": agent_logs,
        "total": len(agent_logs)
    })

def read_agent_logs():
    """–ß–∏—Ç–∞–µ—Ç –ª–æ–≥–∏ –∏–∑ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    global agent_logs, agent_status, agent_process
    
    add_agent_log("INFO - üìñ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞...", "info")
    
    while agent_process and agent_process.poll() is None:
        try:
            line = agent_process.stdout.readline()
            if line:
                cleaned_line = line.strip()
                if cleaned_line:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    log_type = "info"
                    line_lower = cleaned_line.lower()
                    
                    if any(word in line_lower for word in ['error', 'failed', 'exception', 'traceback', '–æ—à–∏–±–∫–∞', '–Ω–µ —É–¥–∞–ª–æ—Å—å']):
                        log_type = "error"
                    elif any(word in line_lower for word in ['success', '—É—Å–ø–µ—à–Ω–æ', '–∑–∞–≤–µ—Ä—à–µ–Ω–æ', '‚úÖ']):
                        log_type = "success"
                    elif any(word in line_lower for word in ['warning', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '‚ö†Ô∏è']):
                        log_type = "warning"
                    elif any(word in line_lower for word in ['debug', '–æ—Ç–ª–∞–¥–∫–∞']):
                        log_type = "debug"
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    formatted_message = cleaned_line
                    add_agent_log(formatted_message, log_type)
        except Exception as e:
            add_agent_log(f"ERROR - –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∞–≥–µ–Ω—Ç–∞: {e}", "error")
            break
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
    if agent_process:
        return_code = agent_process.poll()
        agent_status = "stopped"
        
        if return_code == 0:
            add_agent_log("INFO - ‚úÖ –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ", "success")
        elif return_code is None:
            add_agent_log("WARNING - ‚ö†Ô∏è –ê–≥–µ–Ω—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "warning")
        else:
            add_agent_log(f"ERROR - ‚ùå –ê–≥–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {return_code}", "error")
        
        agent_process = None

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–µ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('./models', exist_ok=True)
    
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    try:
        import flask
        import flask_cors
        from github import Github
        import jenkins
        from llama_cpp import Llama
        from selenium import webdriver
        from dotenv import load_dotenv
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {e.name}")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("pip install flask flask-cors PyGithub python-jenkins llama-cpp-python selenium python-dotenv")
        sys.exit(1)
    
    print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
    print("üì± –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üìù –í—Å–µ –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–∞ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("üõë –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    app.run(debug=True, port=5000)