import os
import json
import time
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions

from config import Config
from ai_client import UniversalAIClient

class SimpleAITestGenerator:
    def __init__(self):
        self.config = Config()
        self.ai_client = UniversalAIClient()
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Windows"""
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Windows...")
        
        try:
            if self.config.BROWSER == "chrome":
                self._setup_chrome_windows()
            else:
                self._setup_chrome_windows()  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Chrome –¥–ª—è Windows
                
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
            self._setup_driver_fallback()
    
    def _setup_chrome_windows(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome –¥–ª—è Windows"""
        options = ChromeOptions()
        
        if self.config.HEADLESS:
            options.add_argument("--headless")
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è Windows
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--disable-features=VizDisplayCompositor")
        options.add_argument("--disable-gpu-sandbox")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        options.add_argument("--log-level=3")
        options.add_argument("--disable-notifications")
        options.add_argument("--disable-infobars")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ webdriver-manager
        service = ChromeService(
            ChromeDriverManager().install(),
            service_args=['--disable-build-check', '--silent']
        )
        
        self.driver = webdriver.Chrome(service=service, options=options)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
        self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        
        self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
    
    def _setup_driver_fallback(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è Windows"""
        try:
            options = ChromeOptions()
            if self.config.HEADLESS:
                options.add_argument("--headless")
            
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ webdriver-manager
            self.driver = webdriver.Chrome(options=options)
            self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
            raise
    
    def check_chrome_installation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Chrome –Ω–∞ Windows"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä Windows
            if self.config.IS_WINDOWS:
                import winreg
                try:
                    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                       r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe")
                    winreg.CloseKey(key)
                    return True
                except:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Program Files
                    chrome_paths = [
                        r"C:\Program Files\Google\Chrome\Application\chrome.exe",
                        r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
                    ]
                    return any(os.path.exists(path) for path in chrome_paths)
            return True
        except:
            return True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    def analyze_page_simple(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        elements_data = []
        element_types = [
            ("input", "–ü–æ–ª—è –≤–≤–æ–¥–∞"), 
            ("button", "–ö–Ω–æ–ø–∫–∏"), 
            ("a", "–°—Å—ã–ª–∫–∏"),
            ("form", "–§–æ—Ä–º—ã")
        ]
        
        for tag, description in element_types:
            try:
                elements = self.driver.find_elements(By.TAG_NAME, tag)
                print(f"   –ù–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ {tag}")
                
                for element in elements[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    try:
                        if element.is_displayed():
                            element_info = self.get_element_info(element, tag)
                            if element_info:
                                elements_data.append(element_info)
                    except:
                        continue
                        
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {tag}: {e}")
        
        print(f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {len(elements_data)} —ç–ª–µ–º–µ–Ω—Ç–∞—Ö")
        return elements_data
    
    def get_element_info(self, element, tag):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ"""
        try:
            info = {
                'tag': tag,
                'text': element.text.strip() if element.text else "",
                'attributes': {}
            }
            
            attributes = ['id', 'name', 'type', 'placeholder', 'class', 'value', 'href', 'action', 'for']
            for attr in attributes:
                try:
                    value = element.get_attribute(attr)
                    if value and value.strip():
                        info['attributes'][attr] = value.strip()
                except:
                    continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            if not info['text'] and not info['attributes']:
                return None
                
            return info
            
        except:
            return None
    
    def ask_ai_for_locators(self, element_description, page_elements):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç AI –≥–¥–µ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤"""
        
        limited_elements = page_elements[:15]
        
        prompt = f"""
        –ù–∞–π–¥–∏ –ª—É—á—à–∏–µ –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞: "{element_description}"
        
        –≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
        {json.dumps(limited_elements, ensure_ascii=False, indent=2)}
        
        –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –ª–æ–∫–∞—Ç–æ—Ä–æ–≤:
        - "ID" –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ id
        - "CSS" –¥–ª—è CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤  
        - "XPATH" –¥–ª—è XPath –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        - "NAME" –¥–ª—è –∞—Ç—Ä–∏–±—É—Ç–∞ name
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        {{
            "element": "–æ–ø–∏—Å–∞–Ω–∏–µ",
            "locators": [
                {{
                    "type": "ID",  # –¢–û–õ–¨–ö–û: ID, CSS, XPATH, NAME
                    "value": "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ", 
                    "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
                }}
            ]
        }}
        
        –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª–æ–∫–∞—Ç–æ—Ä–æ–≤:
        - –î–ª—è id="username": {{"type": "ID", "value": "username"}}
        - –î–ª—è class="btn": {{"type": "CSS", "value": ".btn"}} 
        - –î–ª—è XPath: {{"type": "XPATH", "value": "//button[text()='Login']"}}
        """
        
        try:
            print(f"   ü§ñ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é AI...")
            response = self.ai_client.generate_response(
                prompt=prompt,
                system_message="–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –ª–æ–∫–∞—Ç–æ—Ä–æ–≤: ID, CSS, XPATH, NAME. –í–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON.",
                max_tokens=800
            )
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            response = response.strip()
            if response.startswith('```json'):
                response = response[7:]
            if response.endswith('```'):
                response = response[:-3]
            response = response.strip()
            
            result = json.loads(response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ç–æ—Ä—ã
            valid_locators = []
            for locator in result.get('locators', []):
                locator_type = locator.get('type', '').upper()
                if locator_type in ['ID', 'CSS', 'XPATH', 'NAME']:
                    valid_locators.append(locator)
                else:
                    print(f"   ‚ö†Ô∏è  –ò—Å–ø—Ä–∞–≤–ª—è—é –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞: {locator_type}")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                    if 'id' in locator.get('value', '').lower():
                        locator['type'] = 'ID'
                        valid_locators.append(locator)
                    else:
                        locator['type'] = 'CSS'
                        valid_locators.append(locator)
            
            result['locators'] = valid_locators
            print(f"   ‚úÖ AI –Ω–∞—à–µ–ª {len(valid_locators)} –≤–∞–ª–∏–¥–Ω—ã—Ö –ª–æ–∫–∞—Ç–æ—Ä–æ–≤")
            return result
            
        except json.JSONDecodeError as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {"error": "Invalid JSON", "raw_response": response}
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ AI: {e}")
            return {"error": str(e)}

    def generate_simple_test(self, test_scenario, start_url):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç"""
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞")
        print(f"   –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario}")
        print(f"   URL: {start_url}")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            self.driver.get(start_url)
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            WebDriverWait(self.driver, 15).until(
                lambda driver: driver.execute_script("return document.readyState") == "complete"
            )
            time.sleep(2)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_elements = self.analyze_page_simple()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞
            test_elements = self.identify_test_elements(test_scenario)
            print(f"üéØ –ë—É–¥—É –∏—Å–∫–∞—Ç—å: {', '.join(test_elements)}")
            
            # –ò—â–µ–º –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            locators_map = {}
            for element_desc in test_elements:
                print(f"üîé –ò—â—É –ª–æ–∫–∞—Ç–æ—Ä –¥–ª—è: '{element_desc}'")
                ai_result = self.ask_ai_for_locators(element_desc, page_elements)
                
                if "error" not in ai_result:
                    locators_map[element_desc] = ai_result
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ç–æ—Ä: {ai_result.get('error')}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–∞
            test_code = self.create_test_code(test_scenario, start_url, locators_map)
            return test_code
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            return self.create_fallback_test(test_scenario, start_url)
    
    def create_fallback_test(self, test_scenario, start_url):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        return f'''# –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è Windows
# –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario}
# URL: {start_url}

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def test_windows_fallback():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è Windows (—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏)"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è Windows...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è Windows
    driver = webdriver.Chrome()
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        driver.get("{start_url}")
        time.sleep(5)
        
        print("‚ö†Ô∏è  –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤")
        print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ DevTools (F12) —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        assert "404" not in driver.title, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {{e}}")
    finally:
        driver.quit()
        print("üîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    test_windows_fallback()
'''
    
    def identify_test_elements(self, test_scenario):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞"""
        scenario_lower = test_scenario.lower()
        elements = []
        
        if any(word in scenario_lower for word in ['–ª–æ–≥–∏–Ω', 'login', '–≤—Ö–æ–¥']):
            elements.extend(["–ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞", "–ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è", "–∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞"])
        
        if any(word in scenario_lower for word in ['–ø–æ–∏—Å–∫', 'search']):
            elements.extend(["–ø–æ–ª–µ –ø–æ–∏—Å–∫–∞", "–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞"])
        
        return elements if elements else ["–æ—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞", "–ø–æ–ª–µ –≤–≤–æ–¥–∞"]
    
    def create_test_code(self, test_scenario, start_url, locators_map):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–¥ Python —Ç–µ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–∞ –ë–ï–ó –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
        test_code = f'''# –ê–≤—Ç–æ-—Ç–µ—Å—Ç –¥–ª—è Windows - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI
    # –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario}
    # URL: {start_url}

    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    import time

    def test_auto_generated():
        """–ê–≤—Ç–æ-—Ç–µ—Å—Ç –¥–ª—è Windows"""
        
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –¥–ª—è Windows...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è Windows
        options = webdriver.ChromeOptions()
        options.add_argument("--disable-gpu")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        
        driver = webdriver.Chrome(options=options)
        driver.implicitly_wait(10)
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
            driver.get("{start_url}")
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            WebDriverWait(driver, 15).until(
                lambda d: d.execute_script("return document.readyState") == "complete"
            )
            time.sleep(2)
    '''

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        actions_added = False
        for element_desc, locator_data in locators_map.items():
            if locator_data.get('locators'):
                best_locator = locator_data['locators'][0]
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞
                fixed_type = self._fix_locator_type(best_locator['type'])
                fixed_value = self._validate_locator_value(best_locator['type'], best_locator['value'])
                
                actions_added = True
                
                if "–ø–æ–ª–µ" in element_desc and "–ª–æ–≥–∏–Ω" in element_desc:
                    test_code += f'''
            # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞: {element_desc}
            print("üìù –í–≤–æ–∂—É –ª–æ–≥–∏–Ω...")
            try:
                login_field = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located(({fixed_type}, "{fixed_value}"))
                )
                login_field.clear()
                login_field.send_keys("test_user")
                print("‚úÖ –õ–æ–≥–∏–Ω –≤–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ª–æ–≥–∏–Ω: {{e}}")
                raise
    '''
                elif "–ø–æ–ª–µ" in element_desc and "–ø–∞—Ä–æ–ª" in element_desc:
                    test_code += f'''
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è: {element_desc}
            print("üîí –í–≤–æ–∂—É –ø–∞—Ä–æ–ª—å...")
            try:
                password_field = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located(({fixed_type}, "{fixed_value}"))
                )
                password_field.clear()
                password_field.send_keys("password123")
                print("‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                time.sleep(1)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å: {{e}}")
                raise
    '''
                elif "–∫–Ω–æ–ø–∫–∞" in element_desc:
                    test_code += f'''
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: {element_desc}
            print("üñ±Ô∏è –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É...")
            try:
                button = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable(({fixed_type}, "{fixed_value}"))
                )
                button.click()
                print("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                time.sleep(2)
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É: {{e}}")
                raise
    '''

        # –ï—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        if not actions_added:
            test_code += '''
            # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            print("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            assert "404" not in driver.title, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            time.sleep(2)
    '''

        # –ó–∞–≤–µ—Ä—à–∞—é—â–∞—è —á–∞—Å—Ç—å —Ç–µ—Å—Ç–∞
        test_code += '''
            print("üéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                driver.save_screenshot("error_screenshot.png")
                print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: error_screenshot.png")
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç")
            raise
            
        finally:
            try:
                driver.quit()
                print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä")

    if __name__ == "__main__":
        test_auto_generated()
    '''

        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
        test_code = self._clean_code_indentation(test_code)
        return test_code

    def _clean_code_indentation(self, code):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–¥ –æ—Ç –ª–∏—à–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫"""
        lines = code.split('\n')
        cleaned_lines = []
        
        for line in lines:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            if line.strip() == '':
                cleaned_lines.append('')
            else:
                cleaned_lines.append(line)
        
        return '\n'.join(cleaned_lines)

    def validate_generated_code(self, test_code):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            compile(test_code, '<string>', 'exec')
            print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞")
            return test_code
        except SyntaxError as e:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üîÑ –ò—Å–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            return self._fix_code_formatting(test_code)

    def _fix_code_formatting(self, code):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞"""
        lines = code.split('\n')
        fixed_lines = []
        
        for i, line in enumerate(lines):
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
            stripped_line = line.lstrip()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
            if stripped_line.startswith(('def ', 'class ', 'if ', 'for ', 'while ', 'try:', 'except', 'finally:', 'else:')):
                fixed_lines.append(stripped_line)
            elif stripped_line and not stripped_line.startswith('#'):
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—Å—Ç—É–ø –≤ 4 –ø—Ä–æ–±–µ–ª–∞
                fixed_lines.append('    ' + stripped_line)
            else:
                fixed_lines.append(stripped_line)
        
        fixed_code = '\n'.join(fixed_lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
        try:
            compile(fixed_code, '<string>', 'exec')
            print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return fixed_code
        except SyntaxError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥")
            return code

    def save_test(self, test_code, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç –≤ —Ñ–∞–π–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        os.makedirs(self.config.GENERATED_TESTS_DIR, exist_ok=True)
        filepath = os.path.join(self.config.GENERATED_TESTS_DIR, filename)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        validated_code = self.validate_generated_code(test_code)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(validated_code)
        
        print(f"üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        line_count = len(validated_code.split('\n'))
        print(f"üìä –†–∞–∑–º–µ—Ä: {len(validated_code)} —Å–∏–º–≤–æ–ª–æ–≤, {line_count} —Å—Ç—Ä–æ–∫")
        
        return filepath

    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            try:
                self.driver.quit()
                print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except:
                pass

    def _fix_locator_type(self, locator_type):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–∏–ø –ª–æ–∫–∞—Ç–æ—Ä–∞ –¥–ª—è Selenium"""
        type_mapping = {
            'ID': 'By.ID',
            'CSS': 'By.CSS_SELECTOR', 
            'XPATH': 'By.XPATH',
            'NAME': 'By.NAME',
            'CLASS_NAME': 'By.CLASS_NAME',
            'TAG_NAME': 'By.TAG_NAME',
            'LINK_TEXT': 'By.LINK_TEXT',
            'PARTIAL_LINK_TEXT': 'By.PARTIAL_LINK_TEXT'
        }
        return type_mapping.get(locator_type.upper(), 'By.CSS_SELECTOR')

    def _validate_locator_value(self, locator_type, value):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ç–æ—Ä–∞"""
        if locator_type.upper() == 'ID' and value.startswith('#'):
            return value[1:]  # –£–±–∏—Ä–∞–µ–º # –¥–ª—è ID
        elif locator_type.upper() == 'CSS' and not value.startswith(('.', '#', '[')):
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∫–ª–∞—Å—Å –±–µ–∑ —Ç–æ—á–∫–∏
            if value.startswith('class='):
                return f".{value[6:]}"
        return value