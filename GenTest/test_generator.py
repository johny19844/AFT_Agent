import os
import json
import time
import subprocess
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from webdriver_manager.firefox import GeckoDriverManager
from webdriver_manager.microsoft import EdgeChromiumDriverManager
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.edge.service import Service as EdgeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.edge.options import Options as EdgeOptions

from config import Config
from ai_client import UniversalAIClient

class SimpleAITestGenerator:
    def __init__(self):
        self.config = Config()
        self.ai_client = UniversalAIClient()
        self.driver = None
        self.setup_driver()
    
    def check_browser_installation(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä"""
        try:
            if self.config.BROWSER == "chrome":
                result = subprocess.run(['which', 'google-chrome'], capture_output=True, text=True)
                if result.returncode == 0:
                    return True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º chromium
                result = subprocess.run(['which', 'chromium-browser'], capture_output=True, text=True)
                return result.returncode == 0
            elif self.config.BROWSER == "firefox":
                result = subprocess.run(['which', 'firefox'], capture_output=True, text=True)
                return result.returncode == 0
        except:
            return False
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        print("üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä
        if not self.check_browser_installation():
            print("‚ùå –ë—Ä–∞—É–∑–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
            self.install_browser_dependencies()
        
        try:
            if self.config.BROWSER == "chrome":
                self._setup_chrome()
            elif self.config.BROWSER == "chromium":
                self._setup_chromium()
            elif self.config.BROWSER == "firefox":
                self._setup_firefox()
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä. –ò—Å–ø–æ–ª—å–∑—É—é Chrome.")
                self._setup_chrome()
                
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print("üîÑ –ü—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Firefox...")
            self._setup_firefox_fallback()
    
    def _setup_chrome(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome"""
        options = ChromeOptions()
        if self.config.HEADLESS:
            options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        options.add_argument("--remote-debugging-port=9222")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
        service = ChromeService(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)
        self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
    
    def _setup_chromium(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chromium (–ª—É—á—à–µ –¥–ª—è Linux)"""
        options = ChromeOptions()
        if self.config.HEADLESS:
            options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument("--window-size=1920,1080")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∫ chromium
        chromium_paths = [
            '/usr/bin/chromium-browser',
            '/usr/bin/chromium',
            '/snap/bin/chromium'
        ]
        
        for path in chromium_paths:
            if os.path.exists(path):
                options.binary_location = path
                break
        
        service = ChromeService(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)
        self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
    
    def _setup_firefox(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Firefox (—Å–∞–º—ã–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)"""
        options = FirefoxOptions()
        if self.config.HEADLESS:
            options.add_argument("--headless")
        
        service = FirefoxService(GeckoDriverManager().install())
        self.driver = webdriver.Firefox(service=service, options=options)
        self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
    
    def _setup_firefox_fallback(self):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox"""
        try:
            options = FirefoxOptions()
            if self.config.HEADLESS:
                options.add_argument("--headless")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π firefox –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            self.driver = webdriver.Firefox(options=options)
            self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
            print("‚úÖ Firefox –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä: {e}")
            raise
    
    def install_browser_dependencies(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞"""
        if self.config.IS_LINUX:
            print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Linux...")
            try:
                # –î–ª—è Ubuntu/Debian
                if os.path.exists('/etc/debian_version'):
                    os.system('sudo apt update')
                    os.system('sudo apt install -y chromium-browser firefox wget')
                # –î–ª—è CentOS/RHEL/Fedora
                elif os.path.exists('/etc/redhat-release'):
                    os.system('sudo dnf install -y chromium firefox wget')
                else:
                    print("‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –≤–∞—à–µ–≥–æ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞")
                    print("üìö –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤—Ä—É—á–Ω—É—é:")
                    print("   Ubuntu/Debian: sudo apt install chromium-browser firefox")
                    print("   CentOS/Fedora: sudo dnf install chromium firefox")
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
    
    def analyze_page_simple(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        
        elements_data = []
        element_types = [("input", "–ü–æ–ª—è –≤–≤–æ–¥–∞"), ("button", "–ö–Ω–æ–ø–∫–∏"), ("a", "–°—Å—ã–ª–∫–∏")]
        
        for tag, description in element_types:
            try:
                elements = self.driver.find_elements(By.TAG_NAME, tag)
                for element in elements[:5]:
                    if element.is_displayed():
                        element_info = self.get_element_info(element, tag)
                        if element_info:
                            elements_data.append(element_info)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {tag}: {e}")
        
        return elements_data
    
    def get_element_info(self, element, tag):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ª–µ–º–µ–Ω—Ç–µ"""
        try:
            info = {
                'tag': tag,
                'text': element.text.strip() if element.text else "",
                'attributes': {}
            }
            
            attributes = ['id', 'name', 'type', 'placeholder', 'class', 'value']
            for attr in attributes:
                value = element.get_attribute(attr)
                if value:
                    info['attributes'][attr] = value
            
            return info if info['text'] or info['attributes'] else None
        except:
            return None
    
    def ask_ai_for_locators(self, element_description, page_elements):
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç AI –≥–¥–µ –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
        
        prompt = f"""
        –Ø –Ω–æ–≤–∏—á–æ–∫ –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞.
        
        –Ø –∏—â—É: "{element_description}"
        
        –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
        {json.dumps(page_elements, ensure_ascii=False, indent=2)}
        
        –î–∞–π –º–Ω–µ 3 –ª—É—á—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ—Å—Ç–æ–π JSON:
        
        {{
            "element": "—á—Ç–æ —è –∏—â—É",
            "locators": [
                {{
                    "type": "ID –∏–ª–∏ CSS –∏–ª–∏ XPATH",
                    "value": "–∑–Ω–∞—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ç–æ—Ä–∞", 
                    "explanation": "–ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –ª–æ–∫–∞—Ç–æ—Ä —Ö–æ—Ä–æ—à"
                }}
            ]
        }}
        """
        
        try:
            response = self.ai_client.generate_response(
                prompt=prompt,
                system_message="–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –Ω–æ–≤–∏—á–∫–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã. –û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ. –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –≤–∞–ª–∏–¥–Ω—ã–π JSON.",
                max_tokens=1000
            )
            
            return json.loads(response)
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç AI: {e}")
            print(f"–û—Ç–≤–µ—Ç AI: {response}")
            return {"error": f"Invalid JSON from AI: {e}"}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
            return {"error": str(e)}
    
    def generate_simple_test(self, test_scenario, start_url):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç"""
        
        print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–∞ –¥–ª—è: {test_scenario}")
        print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {start_url}")
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(start_url)
            time.sleep(3)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            page_elements = self.analyze_page_simple()
            print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(page_elements)}")
            
            # –ü—Ä–æ—Å–∏–º AI –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ç–æ—Ä—ã
            test_elements = self.identify_test_elements(test_scenario)
            
            locators_map = {}
            for element_desc in test_elements:
                print(f"üîé –ò—â—É –ª–æ–∫–∞—Ç–æ—Ä –¥–ª—è: {element_desc}")
                ai_result = self.ask_ai_for_locators(element_desc, page_elements)
                
                if "error" not in ai_result:
                    locators_map[element_desc] = ai_result
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤: {len(ai_result.get('locators', []))}")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ç–æ—Ä –¥–ª—è: {element_desc}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ç–µ—Å—Ç–∞
            test_code = self.create_test_code(test_scenario, start_url, locators_map)
            return test_code
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return self.create_fallback_test(test_scenario, start_url)
    
    def create_fallback_test(self, test_scenario, start_url):
        """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞"""
        return f'''# –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç - —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–Ω–∞–ª–∏–∑–∞
# –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario}
# URL: {start_url}

from selenium import webdriver
from selenium.webdriver.common.by import By
import time

def test_fallback():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏)"""
    
    driver = webdriver.Chrome()
    
    try:
        driver.get("{start_url}")
        time.sleep(5)
        
        # TODO: –î–æ–±–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ç–æ—Ä—ã –≤—Ä—É—á–Ω—É—é
        print("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤")
        
    finally:
        driver.quit()

if __name__ == "__main__":
    test_fallback()
'''
    
    def identify_test_elements(self, test_scenario):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞"""
        elements = []
        
        if "–ª–æ–≥–∏–Ω" in test_scenario.lower() or "login" in test_scenario.lower():
            elements.extend(["–ø–æ–ª–µ –¥–ª—è –ª–æ–≥–∏–Ω–∞", "–ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è", "–∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞"])
        
        if "–ø–æ–∏—Å–∫" in test_scenario.lower() or "search" in test_scenario.lower():
            elements.extend(["–ø–æ–ª–µ –ø–æ–∏—Å–∫–∞", "–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞"])
        
        return elements if elements else ["–æ—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞", "–ø–æ–ª–µ –≤–≤–æ–¥–∞"]
    
    def create_test_code(self, test_scenario, start_url, locators_map):
        """–°–æ–∑–¥–∞–µ—Ç –∫–æ–¥ Python —Ç–µ—Å—Ç–∞"""
        
        test_code = f'''# –ê–≤—Ç–æ-—Ç–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI
# –°—Ü–µ–Ω–∞—Ä–∏–π: {test_scenario}
# URL: {start_url}

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def test_auto_generated():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ-—Ç–µ—Å—Ç–∞...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    driver = webdriver.Chrome()
    driver.maximize_window()
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        print("üåê –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
        driver.get("{start_url}")
        time.sleep(3)
        
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        for element_desc, locator_data in locators_map.items():
            if locator_data.get('locators'):
                best_locator = locator_data['locators'][0]
                
                if "–ø–æ–ª–µ" in element_desc and "–ª–æ–≥–∏–Ω" in element_desc:
                    test_code += f'''
        # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        print("üìù –í–≤–æ–∂—É –ª–æ–≥–∏–Ω...")
        {best_locator['type'].lower()}_element = driver.find_element({best_locator['type'].upper()}, "{best_locator['value']}")
        {best_locator['type'].lower()}_element.clear()
        {best_locator['type'].lower()}_element.send_keys("test_user")
        time.sleep(1)
'''
                elif "–ø–æ–ª–µ" in element_desc and "–ø–∞—Ä–æ–ª" in element_desc:
                    test_code += f'''
        # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        print("üîí –í–≤–æ–∂—É –ø–∞—Ä–æ–ª—å...")
        {best_locator['type'].lower()}_element = driver.find_element({best_locator['type'].upper()}, "{best_locator['value']}")
        {best_locator['type'].lower()}_element.clear()
        {best_locator['type'].lower()}_element.send_keys("password123")
        time.sleep(1)
'''
                elif "–∫–Ω–æ–ø–∫–∞" in element_desc:
                    test_code += f'''
        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        print("üñ±Ô∏è –ù–∞–∂–∏–º–∞—é –∫–Ω–æ–ø–∫—É...")
        {best_locator['type'].lower()}_element = driver.find_element({best_locator['type'].upper()}, "{best_locator['value']}")
        {best_locator['type'].lower()}_element.click()
        time.sleep(2)
'''
        
        test_code += '''
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {{e}}")
        raise
    finally:
        driver.quit()
        print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    test_auto_generated()
'''
        
        return test_code
    
    def save_test(self, test_code, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç –≤ —Ñ–∞–π–ª"""
        os.makedirs(self.config.GENERATED_TESTS_DIR, exist_ok=True)
        filepath = os.path.join(self.config.GENERATED_TESTS_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(test_code)
        
        print(f"üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()
            print("üîö –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")