# multi_page_generator.py - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
import os
import json
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

from config import Config
from ai_client import UniversalAIClient

class MultiPageTestGenerator:
    def __init__(self):
        self.config = Config()
        self.ai_client = UniversalAIClient()
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        options = Options()
        if self.config.HEADLESS:
            options.add_argument("--headless")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--window-size=1920,1080")
        
        service = Service(ChromeDriverManager().install())
        self.driver = webdriver.Chrome(service=service, options=options)
        self.driver.implicitly_wait(self.config.ELEMENT_TIMEOUT)
    
    def generate_multi_page_test(self, scenario_description, start_url, test_name):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        
        print("üéØ –°–æ–∑–¥–∞—é –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Ç–µ—Å—Ç...")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.driver.get(start_url)
        time.sleep(3)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è
        steps = self.simple_analyze_scenario(scenario_description)
        
        test_code = f'''# –ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Ç–µ—Å—Ç - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω AI
# –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario_description}
# –°—Ç–∞—Ä—Ç–æ–≤—ã–π URL: {start_url}

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

def {test_name}():
    """–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π —Ç–µ—Å—Ç: {scenario_description}"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞")
    driver = webdriver.Chrome()
    
    try:
        # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        driver.get("{start_url}")
        time.sleep(3)
        
'''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—ã–µ —à–∞–≥–∏
        for i, step in enumerate(steps):
            test_code += f'''
        # –®–∞–≥ {i+1}
        print("–®–∞–≥ {i+1}: {step}")
        time.sleep(2)
'''
        
        test_code += '''
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {{e}}")
    finally:
        driver.quit()

if __name__ == "__main__":
    {test_name}()
'''
        
        return test_code
    
    def simple_analyze_scenario(self, scenario):
        """–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è –±–µ–∑ AI"""
        steps = []
        if "–ª–æ–≥–∏–Ω" in scenario.lower():
            steps.extend(["–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É", "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞", "–ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞"])
        if "–ø–æ–∏—Å–∫" in scenario.lower():
            steps.extend(["–ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞", "–í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"])
        if "–∫–æ—Ä–∑–∏–Ω" in scenario.lower():
            steps.extend(["–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É", "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"])
        
        return steps if steps else ["–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"]
    
    def save_test(self, test_code, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç –≤ —Ñ–∞–π–ª"""
        os.makedirs(self.config.GENERATED_TESTS_DIR, exist_ok=True)
        filepath = os.path.join(self.config.GENERATED_TESTS_DIR, filename)
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(test_code)
        
        print(f"üíæ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä"""
        if self.driver:
            self.driver.quit()