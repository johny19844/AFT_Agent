from ai_test_generator import AILocatorFinder
import os
import sys

def main():
    print("üéØ AI –ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏ –ø–æ–∏—Å–∫ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤")
    print("=" * 50)
    print("üìã –®–ê–ì 1: AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π")
    print("üåê –®–ê–ì 2: Selenium —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ") 
    print("üîç –®–ê–ì 3: AI –Ω–∞—Ö–æ–¥–∏—Ç –ª–æ–∫–∞—Ç–æ—Ä—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    print("üìä –®–ê–ì 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
    print("=" * 50)
    
    if not check_environment():
        return
    
    finder = AILocatorFinder()
    
    try:
        print("\nüìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        url = input("URL —Å–∞–π—Ç–∞: ").strip()
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        print("\nüí° –ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:")
        print("‚Ä¢ '–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è standard_user —Å –ø–∞—Ä–æ–ª–µ–º secret_sauce'")
        print("‚Ä¢ '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É'") 
        print("‚Ä¢ '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email –∏ –ø–∞—Ä–æ–ª–µ–º'")
        print("‚Ä¢ '–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞'")
        
        scenario = input("\n–û–ø–∏—à–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: ").strip()
        if not scenario:
            scenario = "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        
        filename = input("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞: ").strip()
        if not filename:
            filename = "full_analysis_report.md"
        if not filename.endswith('.md'):
            filename += '.md'
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")
        print(f"üåê URL: {url}")
        print(f"üìù –°—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis_result = finder.complete_analysis(scenario, url)
        
        if analysis_result:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            saved_path = finder.save_analysis_report(analysis_result, filename)
            
            print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {saved_path}")
            print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è {len(analysis_result['elements_with_locators'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            
            # –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("\nüìã –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            for item in analysis_result['elements_with_locators']:
                element_info = item['element_info']
                locator_info = item['locator_info']
                
                if "error" not in locator_info and locator_info.get('locators'):
                    best_locator = locator_info['locators'][0]
                    print(f"   ‚úÖ {element_info['name']}: {best_locator['type']} = '{best_locator['value']}'")
                else:
                    print(f"   ‚ùå {element_info['name']}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        finder.close()

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
    try:
        import selenium
        import llama_cpp
        return True
    except ImportError as e:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    main()