import openai
from local_ai import LocalAIClient
from config import Config

class UniversalAIClient:
    def __init__(self):
        self.config = Config()
        self.client = None
        self.setup_client()
    
    def setup_client(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        if self.config.AI_PROVIDER == "openai":
            print("üîó –ò—Å–ø–æ–ª—å–∑—É—é OpenAI API")
            openai.api_key = self.config.OPENAI_API_KEY
            self.client = "openai"
        else:
            print("üíª –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å")
            self.client = LocalAIClient()
    
    def generate_response(self, prompt, system_message=None, max_tokens=None):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        
        if self.client == "openai":
            return self._openai_generate(prompt, system_message, max_tokens)
        else:
            return self._local_generate(prompt, system_message, max_tokens)
    
    def _openai_generate(self, prompt, system_message, max_tokens):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenAI"""
        messages = []
        if system_message:
            messages.append({"role": "system", "content": system_message})
        messages.append({"role": "user", "content": prompt})
        
        try:
            response = openai.chat.completions.create(
                model=self.config.OPENAI_MODEL,
                messages=messages,
                max_tokens=max_tokens or 1000,
                temperature=0.1
            )
            return response.choices[0].message.content
        except Exception as e:
            return f'{{"error": "OpenAI error: {e}"}}'
    
    def _local_generate(self, prompt, system_message, max_tokens):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å"""
        return self.client.generate_response(prompt, system_message, max_tokens)
    
    def chat_completion(self, messages, max_tokens=None):
        """–°–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å OpenAI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        if self.client == "openai":
            try:
                response = openai.chat.completions.create(
                    model=self.config.OPENAI_MODEL,
                    messages=messages,
                    max_tokens=max_tokens or 1000,
                    temperature=0.1
                )
                return response
            except Exception as e:
                return {"choices": [{"message": {"content": f'{{"error": "OpenAI error: {e}"}}'}}]}
        else:
            return self.client.chat_completion(messages, max_tokens)